​Basic usage
​Stretch
Use items-stretch to stretch items to fill the container’s cross axis:

  
    01
    02
    03
  

<div class="flex items-stretch ...">
  <div class="py-4">01</div>
  <div class="py-12">02</div>
  <div class="py-8">03</div>
</div>
​Start
Use items-start to align items to the start of the container’s cross axis:

  
    01
    02
    03
  

<div class="flex items-start ...">
  <div class="py-4">01</div>
  <div class="py-12">02</div>
  <div class="py-8">03</div>
</div>
​Center
Use items-center to align items along the center of the container’s cross axis:

  
    01
    02
    03
  

<div class="flex items-center ...">
  <div class="py-4">01</div>
  <div class="py-12">02</div>
  <div class="py-8">03</div>
</div>
​End
Use items-end to align items to the end of the container’s cross axis:

  
    01
    02
    03
  

<div class="flex items-end ...">
  <div class="py-4">01</div>
  <div class="py-12">02</div>
  <div class="py-8">03</div>
</div>
​Baseline
Use items-baseline to align items along the container’s cross axis such that all of their baselines align:

  
    01
    02
    03
  

<div class="flex items-baseline ...">
  <div class="pt-2 pb-6">01</div>
  <div class="pt-8 pb-12">02</div>
  <div class="pt-12 pb-4">03</div>
</div>

​Applying conditionally
​Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:items-center to only apply the items-center utility on hover.<div class="flex items-stretch hover:items-center">
  <!-- ... -->
</div>
For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.
​Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:items-center to apply the items-center utility at only medium screen sizes and above.<div class="flex items-stretch md:items-center">
  <!-- ... -->
</div>
To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.
​Basic usage
​Auto
Use self-auto to align an item based on the value of the container’s align-items property:

  
    01
    02
    03
  

<div class="flex items-stretch ...">
  <div>01</div>
  <div class="self-auto ...">02</div>
  <div>03</div>
</div>
​Start
Use self-start to align an item to the start of the container’s cross axis, despite the container’s align-items value:

  
    01
    02
    03
  

<div class="flex items-stretch ...">
  <div>01</div>
  <div class="self-start ...">02</div>
  <div>03</div>
</div>
​Center
Use self-center to align an item along the center of the container’s cross axis, despite the container’s align-items value:

  
    01
    02
    03
  

<div class="flex items-stretch ...">
  <div>01</div>
  <div class="self-center ...">02</div>
  <div>03</div>
</div>
​End
Use self-end to align an item to the end of the container’s cross axis, despite the container’s align-items value:

  
    01
    02
    03
  

<div class="flex items-stretch ...">
  <div>01</div>
  <div class="self-end ...">02</div>
  <div>03</div>
</div>
​Stretch
Use self-stretch to stretch an item to fill the container’s cross axis, despite the container’s align-items value:

  
    01
    02
    03
  

<div class="flex items-stretch ...">
  <div>01</div>
  <div class="self-stretch ...">02</div>
  <div>03</div>
</div>

​Applying conditionally
​Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:self-end to only apply the self-end utility on hover.<div class="self-auto hover:self-end">
  <!-- ... -->
</div>
For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.
​Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:self-end to apply the self-end utility at only medium screen sizes and above.<div class="self-auto md:self-end">
  <!-- ... -->
</div>
To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.
​Basic usage
​Spin
Add the animate-spin utility to add a linear spin animation to elements like loading indicators.

  
    
      
      
    
    Processing...
  

<button type="button" class="bg-indigo-500 ..." disabled>
  <svg class="animate-spin h-5 w-5 mr-3 ..." viewBox="0 0 24 24">
    <!-- ... -->
  </svg>
  Processing...
</button>
​Ping
Add the animate-ping utility to make an element scale and fade like a radar ping or ripple of water — useful for things like notification badges.

  
    
      Transactions
    
    
      
      
    
  

<span class="relative flex h-3 w-3">
  <span class="animate-ping absolute inline-flex h-full w-full rounded-full bg-sky-400 opacity-75"></span>
  <span class="relative inline-flex rounded-full h-3 w-3 bg-sky-500"></span>
</span>
​Pulse
Add the animate-pulse utility to make an element gently fade in and out — useful for things like skeleton loaders.

  
    
      
      
        
        
          
            
            
          
          
        
      
    
  

<div class="border border-blue-300 shadow rounded-md p-4 max-w-sm w-full mx-auto">
  <div class="animate-pulse flex space-x-4">
    <div class="rounded-full bg-slate-200 h-10 w-10"></div>
    <div class="flex-1 space-y-6 py-1">
      <div class="h-2 bg-slate-200 rounded"></div>
      <div class="space-y-3">
        <div class="grid grid-cols-3 gap-4">
          <div class="h-2 bg-slate-200 rounded col-span-2"></div>
          <div class="h-2 bg-slate-200 rounded col-span-1"></div>
        </div>
        <div class="h-2 bg-slate-200 rounded"></div>
      </div>
    </div>
  </div>
</div><div class="border border-blue-300 shadow rounded-md p-4 max-w-sm w-full mx-auto">
  <div class="animate-pulse flex space-x-4">
    <div class="rounded-full bg-slate-700 h-10 w-10"></div>
    <div class="flex-1 space-y-6 py-1">
      <div class="h-2 bg-slate-700 rounded"></div>
      <div class="space-y-3">
        <div class="grid grid-cols-3 gap-4">
          <div class="h-2 bg-slate-700 rounded col-span-2"></div>
          <div class="h-2 bg-slate-700 rounded col-span-1"></div>
        </div>
        <div class="h-2 bg-slate-700 rounded"></div>
      </div>
    </div>
  </div>
</div>
​Bounce
Add the animate-bounce utility to make an element bounce up and down — useful for things like “scroll down” indicators.

  
    
      
    
  

<svg class="animate-bounce w-6 h-6 ...">
  <!-- ... -->
</svg>
​Prefers-reduced-motion
For situations where the user has specified that they prefer reduced motion, you can conditionally apply animations and transitions using the motion-safe and motion-reduce variants:
<button type="button" class="bg-indigo-600 ..." disabled>
  <svg class="motion-safe:animate-spin h-5 w-5 mr-3 ..." viewBox="0 0 24 24">
    <!-- ... -->
  </svg>
  Processing
</button>

​Applying conditionally
​Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:animate-spin to only apply the animate-spin utility on hover.<div class="hover:animate-spin">
  <!-- ... -->
</div>
For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.
​Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:animate-spin to apply the animate-spin utility at only medium screen sizes and above.<div class="md:animate-spin">
  <!-- ... -->
</div>
To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.

​Using custom values
​Customizing your theme
Animations by their very nature tend to be highly project-specific. The animations we include by default are best thought of as helpful examples, and you’re encouraged to customize your animations to better suit your needs.
By default, Tailwind provides utilities for four different example animations, as well as the animate-none utility. You can customize these values by editing theme.animation or theme.extend.animation in your tailwind.config.js file.
tailwind.config.jsmodule.exports = {
  theme: {
    extend: {
      animation: {
        'spin-slow': 'spin 3s linear infinite',
      }
    }
  }
}

To add new animation @keyframes, use the keyframes section of your theme configuration:
tailwind.config.jsmodule.exports = {
  theme: {
    extend: {
      keyframes: {
        wiggle: {
          '0%, 100%': { transform: 'rotate(-3deg)' },
          '50%': { transform: 'rotate(3deg)' },
        }
      }
    }
  }
}

You can then reference these keyframes by name in the animation section of your theme configuration:
tailwind.config.jsmodule.exports = {
  theme: {
    extend: {
      animation: {
        wiggle: 'wiggle 1s ease-in-out infinite',
      }
    }
  }
}

Learn more about customizing the default theme in the theme customization documentation.
​Arbitrary values
If you need to use a one-off animation value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.<div class="animate-[wiggle_1s_ease-in-out_infinite]">
  <!-- ... -->
</div>
Learn more about arbitrary value support in the arbitrary values documentation.
​Basic usage
​Removing default element appearance
Use appearance-none to reset any browser specific styling on an element. This utility is often used when creating custom form components.

  
    
      Yes
      No
      Maybe
    
    
      Default browser styles applied
    
  
  
    
      
        
      
      
        Yes
        No
        Maybe
      
    
    
      Remove default browser styles
    
  

<select>
  <option>Yes</option>
  <option>No</option>
  <option>Maybe</option>
</select>

<div class="grid">
  <select class="appearance-none row-start-1 col-start-1 bg-slate-50 dark:bg-slate-800 ...">
    <option>Yes</option>
    <option>No</option>
    <option>Maybe</option>
  </select>
  <svg class="pointer-events-none row-start-1 col-start-1 ...">
    <!-- ... -->
  </svg>
</div>
​Restoring the default element appearance
Use appearance-auto to restore the default browser specific styling on an element. This is useful for reverting to the standard browser controls in certain accessibility modes.
Try emulating `forced-colors: active` in your developer tools to see the difference
  
    
      
        
        
          
        
      
      Falls back to default appearance
    
  
  
    
      
        
        
          
        
      
      Keeps custom appearance
    
  

<label>
  <div>
    <input type="checkbox" class="appearance-none forced-colors:appearance-auto ..." />
    <svg class="invisible peer-checked:visible forced-colors:hidden ..." >
      <!-- ... -->
    </svg>
  </div>
  Falls back to default appearance
</label>

<label>
  <div>
    <input type="checkbox" class="appearance-none ..." />
    <svg class="invisible peer-checked:visible ...">
      <!-- ... -->
    </svg>
  </div>
  Keeps custom appearance
</label>
​Applying conditionally
​Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:appearance-none to only apply the appearance-none utility on hover.<div class="appearance-auto hover:appearance-none">
  <!-- ... -->
</div>
For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.
​Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:appearance-none to apply the appearance-none utility at only medium screen sizes and above.<div class="appearance-auto md:appearance-none">
  <!-- ... -->
</div>
To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.
​Basic usage
​Setting the aspect ratio
Use the aspect-{ratio} utilities to set the desired aspect ratio of an element.

<iframe class="w-full aspect-video ..." src="https://www.youtube.com/..."></iframe>
Tailwind doesn’t include a large set of aspect ratio values out of the box since it’s easier to just use arbitrary values. See the arbitrary values section for more information.
​Browser support
The aspect-{ratio} utilities use the native aspect-ratio CSS property, which was not supported in Safari until version 15. Until Safari 15 is popularized, Tailwind’s aspect-ratio plugin is a good alternative.

​Applying conditionally
​Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:aspect-square to only apply the aspect-square utility on hover.<iframe class="w-full aspect-video hover:aspect-square" src="https://www.youtube.com/..."></iframe>For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.
​Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:aspect-square to apply the aspect-square utility at only medium screen sizes and above.<iframe class="w-full aspect-video md:aspect-square" src="https://www.youtube.com/..."></iframe>To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.

​Using custom values
​Customizing your theme
By default, Tailwind provides a minimal set of aspect-ratio utilities. You can customize these values by editing theme.aspectRatio or theme.extend.aspectRatio in your tailwind.config.js file.
tailwind.config.jsmodule.exports = {
  theme: {
    extend: {
      aspectRatio: {
        '4/3': '4 / 3',
      },
    }
  }
}

Learn more about customizing the default theme in the theme customization documentation.
​Arbitrary values
If you need to use a one-off aspect-ratio value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.<iframe class="w-full aspect-[4/3]" src="https://www.youtube.com/..."></iframe>Learn more about arbitrary value support in the arbitrary values documentation.
​Basic usage
​Blurring behind an element
Use the backdrop-blur-{amount?} utilities to control an element’s backdrop blur.


  
    backdrop-blur-sm
    
      
      
      
    
  
  
    backdrop-blur-md
    
      
      
      
    
  
  
    backdrop-blur-xl
    
      
      
      
    
  


<div class="backdrop-blur-sm bg-white/30 ...">
  <!-- ... -->
</div>
<div class="backdrop-blur-md bg-white/30 ...">
  <!-- ... -->
</div>
<div class="backdrop-blur-xl bg-white/30 ...">
  <!-- ... -->
</div>
​Removing backdrop filters
To remove all of the backdrop filters on an element at once, use the backdrop-filter-none utility:<div class="backdrop-blur-md backdrop-brightness-150 md:backdrop-filter-none">
  <!-- ... -->
</div>
This can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint.

​Applying conditionally
​Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:backdrop-blur-lg to only apply the backdrop-blur-lg utility on hover.<div class="backdrop-blur-sm hover:backdrop-blur-lg">
  <!-- ... -->
</div>
For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.
​Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:backdrop-blur-lg to apply the backdrop-blur-lg utility at only medium screen sizes and above.<div class="backdrop-blur-sm md:backdrop-blur-lg">
  <!-- ... -->
</div>
To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.

​Using custom values
​Customizing your theme
By default, Tailwind includes a handful of general purpose backdrop-blur utilities. You can customize these values by editing theme.backdropBlur or theme.extend.backdropBlur in your tailwind.config.js file.
tailwind.config.jsmodule.exports = {
  theme: {
    extend: {
      backdropBlur: {
        xs: '2px',
      }
    }
  }
}

Learn more about customizing the default theme in the theme customization documentation.
​Arbitrary values
If you need to use a one-off backdrop-blur value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.<div class="backdrop-blur-[2px]">
  <!-- ... -->
</div>
Learn more about arbitrary value support in the arbitrary values documentation.
​Basic usage
​Controlling backdrop brightness
Use the backdrop-brightness-{amount?} utilities to control an element’s backdrop brightness.


  
    backdrop-brightness-50
    
      
      
      
    
  
  
    backdrop-brightness-125
    
      
      
      
    
  
  
    backdrop-brightness-200
    
      
      
      
    
  


<div class="backdrop-brightness-50 bg-white/30 ...">
  <!-- ... -->
</div>
<div class="backdrop-brightness-125 bg-white/30 ...">
  <!-- ... -->
</div>
<div class="backdrop-brightness-200 bg-white/30 ...">
  <!-- ... -->
</div>
​Removing backdrop filters
To remove all of the backdrop filters on an element at once, use the backdrop-filter-none utility:<div class="backdrop-blur-md backdrop-brightness-150 md:backdrop-filter-none">
  <!-- ... -->
</div>
This can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint.

​Applying conditionally
​Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:backdrop-brightness-150 to only apply the backdrop-brightness-150 utility on hover.<div class="backdrop-brightness-110 hover:backdrop-brightness-150">
  <!-- ... -->
</div>
For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.
​Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:backdrop-brightness-150 to apply the backdrop-brightness-150 utility at only medium screen sizes and above.<div class="backdrop-brightness-110 md:backdrop-brightness-150">
  <!-- ... -->
</div>
To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.

​Using custom values
​Customizing your theme
By default, Tailwind includes a handful of general purpose backdrop-brightness utilities. You can customize these values by editing theme.backdropBrightness or theme.extend.backdropBrightness in your tailwind.config.js file.
tailwind.config.jsmodule.exports = {
  theme: {
    extend: {
      backdropBrightness: {
        25: '.25',
        175: '1.75',
      }
    }
  }
}

Learn more about customizing the default theme in the theme customization documentation.
​Arbitrary values
If you need to use a one-off backdrop-brightness value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.<div class="backdrop-brightness-[1.75]">
  <!-- ... -->
</div>
Learn more about arbitrary value support in the arbitrary values documentation.
​Basic usage
​Controlling backdrop contrast
Use the backdrop-contrast-{amount?} utilities to control an element’s backdrop contrast.


  
    backdrop-contrast-50
    
      
      
      
    
  
  
    backdrop-contrast-125
    
      
      
      
    
  
  
    backdrop-contrast-200
    
      
      
      
    
  


<div class="backdrop-contrast-50 bg-white/30 ...">
  <!-- ... -->
</div>
<div class="backdrop-contrast-125 bg-white/30 ...">
  <!-- ... -->
</div>
<div class="backdrop-contrast-200 bg-white/30 ...">
  <!-- ... -->
</div>
​Removing backdrop filters
To remove all of the backdrop filters on an element at once, use the backdrop-filter-none utility:<div class="backdrop-blur-md backdrop-contrast-125 md:backdrop-filter-none">
  <!-- ... -->
</div>
This can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint.

​Applying conditionally
​Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:backdrop-contrast-150 to only apply the backdrop-contrast-150 utility on hover.<div class="backdrop-contrast-125 hover:backdrop-contrast-150">
  <!-- ... -->
</div>
For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.
​Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:backdrop-contrast-150 to apply the backdrop-contrast-150 utility at only medium screen sizes and above.<div class="backdrop-contrast-125 md:backdrop-contrast-150">
  <!-- ... -->
</div>
To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.

​Using custom values
​Customizing your theme
By default, Tailwind includes a handful of general purpose backdrop-contrast utilities. You can customize these values by editing theme.backdropContrast or theme.extend.backdropContrast in your tailwind.config.js file.
tailwind.config.jsmodule.exports = {
  theme: {
    extend: {
      backdropContrast: {
        25: '.25',
      }
    }
  }
}

Learn more about customizing the default theme in the theme customization documentation.
​Arbitrary values
If you need to use a one-off backdrop-contrast value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.<div class="backdrop-contrast-[.25]">
  <!-- ... -->
</div>
Learn more about arbitrary value support in the arbitrary values documentation.
​Basic usage
​Making an element grayscale
Use the backdrop-grayscale and backdrop-grayscale-0 utilities to control whether an element’s backdrop should be rendered as grayscale or in full color.


  
    backdrop-grayscale-0
    
      
      
      
    
  
  
    backdrop-grayscale
    
      
      
      
    
  


<div class="backdrop-grayscale-0 bg-white/30 ...">
  <!-- ... -->
</div>
<div class="backdrop-grayscale bg-white/30 ...">
  <!-- ... -->
</div>
​Removing backdrop filters
To remove all of the backdrop filters on an element at once, use the backdrop-filter-none utility:<div class="backdrop-blur-md backdrop-grayscale md:backdrop-filter-none">
  <!-- ... -->
</div>
This can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint.

​Applying conditionally
​Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:backdrop-grayscale-0 to only apply the backdrop-grayscale-0 utility on hover.<div class="backdrop-grayscale hover:backdrop-grayscale-0">
  <!-- ... -->
</div>
For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.
​Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:backdrop-grayscale-0 to apply the backdrop-grayscale-0 utility at only medium screen sizes and above.<div class="backdrop-grayscale md:backdrop-grayscale-0">
  <!-- ... -->
</div>
To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.

​Using custom values
​Customizing your theme
By default, Tailwind includes a handful of general purpose backdrop-grayscale utilities. You can customize these values by editing theme.backdropGrayscale or theme.extend.backdropGrayscale in your tailwind.config.js file.
tailwind.config.jsmodule.exports = {
  theme: {
    extend: {
      backdropGrayscale: {
        50: '.5',
      }
    }
  }
}

Learn more about customizing the default theme in the theme customization documentation.
​Arbitrary values
If you need to use a one-off backdrop-grayscale value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.<div class="backdrop-grayscale-[.5]">
  <!-- ... -->
</div>
Learn more about arbitrary value support in the arbitrary values documentation.
​Basic usage
​Rotating the backdrop’s hue
Use the backdrop-hue-rotate-{amount} utilities to rotate the hue of an element’s backdrop.


  
    backdrop-hue-rotate-90
    
      
      
      
    
  
  
    backdrop-hue-rotate-180
    
      
      
      
    
  
  
    -backdrop-hue-rotate-60
    
      
      
      
    
  


<div class="backdrop-hue-rotate-90 bg-white/30 ...">
  <!-- ... -->
</div>
<div class="backdrop-hue-rotate-180 bg-white/30 ...">
  <!-- ... -->
</div>
<div class="-backdrop-hue-rotate-60 bg-white/30 ...">
  <!-- ... -->
</div>
​Using negative values
To use a negative backdrop hue rotate value, prefix the class name with a dash to convert it to a negative value.
<div class="-backdrop-hue-rotate-60">
  <!-- ... -->
</div>
​Removing backdrop filters
To remove all of the backdrop filters on an element at once, use the backdrop-filter-none utility:<div class="backdrop-blur-md backdrop-hue-rotate-180 md:backdrop-filter-none">
  <!-- ... -->
</div>
This can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint.

​Applying conditionally
​Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:backdrop-hue-rotate-60 to only apply the backdrop-hue-rotate-60 utility on hover.<div class="backdrop-hue-rotate-15 hover:backdrop-hue-rotate-60">
  <!-- ... -->
</div>
For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.
​Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:backdrop-hue-rotate-60 to apply the backdrop-hue-rotate-60 utility at only medium screen sizes and above.<div class="backdrop-hue-rotate-15 md:backdrop-hue-rotate-60">
  <!-- ... -->
</div>
To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.

​Using custom values
​Customizing your theme
By default, Tailwind includes a handful of general purpose backdrop-hue-rotate utilities. You can customize these values by editing theme.backdropHueRotate or theme.extend.backdropHueRotate in your tailwind.config.js file.
tailwind.config.jsmodule.exports = {
  theme: {
    extend: {
      backdropHueRotate: {
        '-270': '-270deg',
        270: '270deg',
      }
    }
  }
}

Learn more about customizing the default theme in the theme customization documentation.
​Arbitrary values
If you need to use a one-off backdrop-hue-rotate value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.<div class="backdrop-hue-rotate-[270deg]">
  <!-- ... -->
</div>
Learn more about arbitrary value support in the arbitrary values documentation.
​Basic usage
​Inverting an element’s backdrop
Use the backdrop-invert and backdrop-invert-0 utilities to control whether an element should be rendered with inverted backdrop colors or normally.


  
    backdrop-invert-0
    
      
      
      
    
  
  
    backdrop-invert
    
      
      
      
    
  


<div class="backdrop-invert-0 bg-white/30 ...">
  <!-- ... -->
</div>
<div class="backdrop-invert bg-white/30 ...">
  <!-- ... -->
</div>
​Removing backdrop filters
To remove all of the backdrop filters on an element at once, use the backdrop-filter-none utility:<div class="backdrop-blur-md backdrop-invert md:backdrop-filter-none">
  <!-- ... -->
</div>
This can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint.

​Applying conditionally
​Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:backdrop-invert-0 to only apply the backdrop-invert-0 utility on hover.<div class="backdrop-invert hover:backdrop-invert-0">
  <!-- ... -->
</div>
For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.
​Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:backdrop-invert-0 to apply the backdrop-invert-0 utility at only medium screen sizes and above.<div class="backdrop-invert md:backdrop-invert-0">
  <!-- ... -->
</div>
To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.

​Using custom values
​Customizing your theme
By default, Tailwind includes a handful of general purpose backdrop-invert utilities. You can customize these values by editing theme.backdropInvert or theme.extend.backdropInvert in your tailwind.config.js file.
tailwind.config.jsmodule.exports = {
  theme: {
    extend: {
      backdropInvert: {
        25: '.25',
        75: '.75',
      }
    }
  }
}

Learn more about customizing the default theme in the theme customization documentation.
​Arbitrary values
If you need to use a one-off backdrop-invert value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.<div class="backdrop-invert-[.25]">
  <!-- ... -->
</div>
Learn more about arbitrary value support in the arbitrary values documentation.
​Basic usage
​Controlling opacity of backdrop filters
Use the backdrop-opacity-{amount} utilities to control the opacity of other backdrop filters applied to an element.


  
    backdrop-opacity-10
    
      
      
      
    
  
  
    backdrop-opacity-60
    
      
      
      
    
  
  
    backdrop-opacity-95
    
      
      
      
    
  


<div class="backdrop-opacity-10 backdrop-invert bg-white/30 ...">
  <!-- ... -->
</div>
<div class="backdrop-opacity-60 backdrop-invert bg-white/30 ...">
  <!-- ... -->
</div>
<div class="backdrop-opacity-95 backdrop-invert bg-white/30 ...">
  <!-- ... -->
</div>
​Removing backdrop filters
To remove all of the backdrop filters on an element at once, use the backdrop-filter-none utility:<div class="backdrop-blur-md backdrop-opacity-60 md:backdrop-filter-none">
  <!-- ... -->
</div>
This can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint.

​Applying conditionally
​Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:backdrop-opacity-60 to only apply the backdrop-opacity-60 utility on hover.<div class="backdrop-opacity-100 hover:backdrop-opacity-60">
  <!-- ... -->
</div>
For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.
​Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:backdrop-opacity-60 to apply the backdrop-opacity-60 utility at only medium screen sizes and above.<div class="backdrop-opacity-100 md:backdrop-opacity-60">
  <!-- ... -->
</div>
To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.

​Using custom values
​Customizing your theme
By default, Tailwind includes a handful of general purpose backdrop-opacity utilities. You can customize these values by editing theme.backdropOpacity or theme.extend.backdropOpacity in your tailwind.config.js file.
tailwind.config.jsmodule.exports = {
  theme: {
    extend: {
      backdropOpacity: {
        15: '.15',
      }
    }
  }
}

Learn more about customizing the default theme in the theme customization documentation.
​Arbitrary values
If you need to use a one-off backdrop-opacity value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.<div class="backdrop-opacity-[.15]">
  <!-- ... -->
</div>
Learn more about arbitrary value support in the arbitrary values documentation.
​Basic usage
​Changing backdrop saturation
Use the backdrop-saturate-{amount} utilities to control an element’s backdrop saturation.


  
    backdrop-saturate-50
    
      
      
      
    
  
  
    backdrop-saturate-125
    
      
      
      
    
  
  
    backdrop-saturate-200
    
      
      
      
    
  


<div class="backdrop-saturate-50 bg-white/30 ...">
  <!-- ... -->
</div>
<div class="backdrop-saturate-125 bg-white/30 ...">
  <!-- ... -->
</div>
<div class="backdrop-saturate-200 bg-white/30 ...">
  <!-- ... -->
</div>
​Removing backdrop filters
To remove all of the backdrop filters on an element at once, use the backdrop-filter-none utility:<div class="backdrop-blur-md backdrop-saturate-150 md:backdrop-filter-none">
  <!-- ... -->
</div>
This can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint.

​Applying conditionally
​Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:backdrop-saturate-150 to only apply the backdrop-saturate-150 utility on hover.<div class="backdrop-saturate-50 hover:backdrop-saturate-150">
  <!-- ... -->
</div>
For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.
​Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:backdrop-saturate-150 to apply the backdrop-saturate-150 utility at only medium screen sizes and above.<div class="backdrop-saturate-50 md:backdrop-saturate-150">
  <!-- ... -->
</div>
To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.

​Using custom values
​Customizing your theme
By default, Tailwind includes a handful of general purpose backdrop-saturate utilities. You can customize these values by editing theme.backdropSaturate or theme.extend.backdropSaturate in your tailwind.config.js file.
tailwind.config.jsmodule.exports = {
  theme: {
    extend: {
      backdropSaturate: {
        25: '.25',
      }
    }
  }
}

Learn more about customizing the default theme in the theme customization documentation.
​Arbitrary values
If you need to use a one-off backdrop-saturate value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.<div class="backdrop-saturate-[.25]">
  <!-- ... -->
</div>
Learn more about arbitrary value support in the arbitrary values documentation.
​Basic usage
​Adding backdrop sepia filters
Use the backdrop-sepia and backdrop-sepia-0 utilities to control whether an element’s backdrop should be rendered as sepia or in full color.


  
    backdrop-sepia-0
    
      
      
      
    
  
  
    backdrop-sepia
    
      
      
      
    
  


<div class="backdrop-sepia-0 bg-white/30 ...">
  <!-- ... -->
</div>
<div class="backdrop-sepia bg-white/30 ...">
  <!-- ... -->
</div>
​Removing backdrop filters
To remove all of the backdrop filters on an element at once, use the backdrop-filter-none utility:<div class="backdrop-blur-md backdrop-sepia md:backdrop-filter-none">
  <!-- ... -->
</div>
This can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint.

​Applying conditionally
​Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:backdrop-sepia-0 to only apply the backdrop-sepia-0 utility on hover.<div class="backdrop-sepia hover:backdrop-sepia-0">
  <!-- ... -->
</div>
For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.
​Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:backdrop-sepia-0 to apply the backdrop-sepia-0 utility at only medium screen sizes and above.<div class="backdrop-sepia md:backdrop-sepia-0">
  <!-- ... -->
</div>
To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.

​Using custom values
​Customizing your theme
By default, Tailwind includes a handful of general purpose backdrop-sepia utilities. You can customize these values by editing theme.backdropSepia or theme.extend.backdropSepia in your tailwind.config.js file.
tailwind.config.jsmodule.exports = {
  theme: {
    extend: {
      backdropSepia: {
        25: '.25',
        75: '.75',
      }
    }
  }
}

Learn more about customizing the default theme in the theme customization documentation.
​Arbitrary values
If you need to use a one-off backdrop-sepia value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.<div class="backdrop-sepia-[.25]">
  <!-- ... -->
</div>
Learn more about arbitrary value support in the arbitrary values documentation.
​Basic usage
​Fixed
Use bg-fixed to fix the background image relative to the viewport.

  
    
      
        My trip to the summit
        November 16, 2021 · 4 min read
        Maybe we can live without libraries, people like you and me. Maybe. Sure, we're too old to change the world, but what about that kid, sitting down, opening a book, right now, in a branch at the local library and finding drawings of pee-pees and wee-wees on the Cat in the Hat and the Five Chinese Brothers? Doesn't HE deserve better?
        Look. If you think this is about overdue fines and missing books, you'd better think again. This is about that kid's right to read a book without getting his mind warped! Or: maybe that turns you on, Seinfeld; maybe that's how y'get your kicks. You and your good-time buddies.
      
    
  

<div class="bg-fixed ..." style="background-image: url(...)"></div>
​Local
Use bg-local to scroll the background image with the container and the viewport.

  
    
      
        
          "Because the mail never stops. It just keeps coming and coming and coming, there's never a let-up. It's relentless. Every day it piles up more and more and more. And you gotta get it out but the more you get it out the more it keeps coming in. And then the barcode reader breaks and it's Publisher's Clearing House day."
          — Newman
        
      
    
  

<div class="bg-local ..." style="background-image: url(...)"></div>
​Scroll
Use bg-scroll to scroll the background image with the viewport, but not with the container.

  
    
      
        
          "Because the mail never stops. It just keeps coming and coming and coming, there's never a let-up. It's relentless. Every day it piles up more and more and more. And you gotta get it out but the more you get it out the more it keeps coming in. And then the barcode reader breaks and it's Publisher's Clearing House day."
          — Newman
        
      
    
  

<div class="bg-scroll ..." style="background-image: url(...)"></div>

​Applying conditionally
​Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:bg-fixed to only apply the bg-fixed utility on hover.<div class="bg-local hover:bg-fixed">
  <!-- ... -->
</div>
For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.
​Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:bg-fixed to apply the bg-fixed utility at only medium screen sizes and above.<div class="bg-local md:bg-fixed">
  <!-- ... -->
</div>
To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.
​Basic usage
​Setting the background blend mode
Use the bg-blend-{mode} utilities to control how an element’s background image(s) should blend with its background color.
<div class="bg-blend-multiply ...">
  <!-- ... -->
</div>

​Applying conditionally
​Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:bg-blend-darken to only apply the bg-blend-darken utility on hover.<div class="bg-blend-lighten hover:bg-blend-darken">
  <!-- ... -->
</div>
For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.
​Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:bg-blend-darken to apply the bg-blend-darken utility at only medium screen sizes and above.<div class="bg-blend-lighten md:bg-blend-darken">
  <!-- ... -->
</div>
To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.
​Basic usage
​Setting the background clip
Use the bg-clip-{keyword} utilities to control the bounding box of an element’s background.

  
    bg-clip-border
    
  
  
    bg-clip-padding
    
  
  
    bg-clip-content
    
  

<div class="bg-clip-border p-6 bg-violet-600 border-4 border-violet-300 border-dashed"></div>
<div class="bg-clip-padding p-6 bg-violet-600 border-4 border-violet-300 border-dashed"></div>
<div class="bg-clip-content p-6 bg-violet-600 border-4 border-violet-300 border-dashed"></div>
​Cropping to text
Use bg-clip-text to crop an element’s background to match the shape of the text. Useful for effects where you want a background image to be visible through the text.

  
    Hello world
  

<div class="text-5xl font-extrabold ...">
  <span class="bg-clip-text text-transparent bg-gradient-to-r from-pink-500 to-violet-500">
    Hello world
  </span>
</div>

​Applying conditionally
​Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:bg-clip-padding to only apply the bg-clip-padding utility on hover.<div class="bg-clip-border hover:bg-clip-padding">
  <!-- ... -->
</div>
For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.
​Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:bg-clip-padding to apply the bg-clip-padding utility at only medium screen sizes and above.<div class="bg-clip-border md:bg-clip-padding">
  <!-- ... -->
</div>
To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.
​Basic usage
​Setting the background color
Control the background color of an element using the bg-{color} utilities.

  
    Save changes
  

<button class="bg-indigo-500 ...">
  Save changes
</button>
​Changing the opacity
Control the opacity of an element’s background color using the color opacity modifier.

  
    bg-sky-500
    Button A
  
  
    bg-sky-500/75
    Button B
  
  
    bg-sky-500/50
    Button C
  

<button class="bg-sky-500/100 ..."></button>
<button class="bg-sky-500/75 ..."></button>
<button class="bg-sky-500/50 ..."></button>
You can use any value defined in your opacity scale, or use arbitrary values if you need to deviate from your design tokens.
<div class="bg-sky-500/[.06] ..."></div>

​Applying conditionally
​Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:bg-cyan-600 to only apply the bg-cyan-600 utility on hover.Try hovering over the button to see the background color change
  
    Subscribe
  
<button class="bg-cyan-500 hover:bg-cyan-600 ...">Subscribe</button>For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.
​Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:bg-green-500 to apply the bg-green-500 utility at only medium screen sizes and above.<button class="bg-blue-500 md:bg-green-500 ...">Subscribe</button>To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.

​Using custom values
​Customizing your theme
By default, Tailwind makes the entire default color palette available as background colors. You can customize your color palette by editing theme.colors or theme.extend.colors in your tailwind.config.js file.tailwind.config.jsmodule.exports = {
  theme: {
    extend: {
      colors: {
        'regal-blue': '#243c5a',
      },
    }
  }
}

Alternatively, you can customize just your background colors by editing theme.backgroundColor or theme.extend.backgroundColor in your tailwind.config.js file.Learn more about customizing the default theme in the theme customization documentation.
​Arbitrary values
If you need to use a one-off color value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.<p class="bg-[#50d71e]">
  <!-- ... -->
</p>
Learn more about arbitrary value support in the arbitrary values documentation.
​Basic usage
​Linear gradients
To give an element a linear gradient background, use one of the bg-gradient-{direction} utilities, in combination with the gradient color stop utilities.

  
  
  
  

<div class="h-14 bg-gradient-to-r from-cyan-500 to-blue-500"></div>
<div class="h-14 bg-gradient-to-r from-sky-500 to-indigo-500"></div>
<div class="h-14 bg-gradient-to-r from-violet-500 to-fuchsia-500"></div>
<div class="h-14 bg-gradient-to-r from-purple-500 to-pink-500"></div>

​Applying conditionally
​Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:bg-gradient-to-r to only apply the bg-gradient-to-r utility on hover.<div class="bg-gradient-to-l hover:bg-gradient-to-r">
  <!-- ... -->
</div>
For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.
​Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:bg-gradient-to-r to apply the bg-gradient-to-r utility at only medium screen sizes and above.<div class="bg-gradient-to-l md:bg-gradient-to-r">
  <!-- ... -->
</div>
To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.

​Using custom values
​Customizing your theme
By default, Tailwind includes background image utilities for creating linear gradient backgrounds in eight directions.
You can add your own background images by editing the theme.backgroundImage section of your tailwind.config.js file:
tailwind.config.jsmodule.exports = {
  theme: {
    extend: {
      backgroundImage: {
        'hero-pattern': "url('/img/hero-pattern.svg')",
        'footer-texture': "url('/img/footer-texture.png')",
      }
    }
  }
}

These don’t just have to be gradients — they can be any background images you need.
Learn more about customizing the default theme in the theme customization documentation.
​Arbitrary values
If you need to use a one-off background-image value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.<div class="bg-[url('/img/hero-pattern.svg')]">
  <!-- ... -->
</div>
Learn more about arbitrary value support in the arbitrary values documentation.